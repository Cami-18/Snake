import pygame
import pygame_menu
from pygame_menu.examples import create_example_window
from random import randint

from typing import Tuple, Any

surface = create_example_window('Menu', (640, 640))

#Couleurs
ROUGE = pygame.Color(210,45,60)
BLANC = pygame.Color(255, 255, 255)
BLEU = pygame.Color(0,0,139)
JAUNE = pygame.Color(250,250,0)
NOIR = pygame.Color(0,0,0)
VERT = pygame.Color(60,215,60)

#Liste des fonctions pour le jeu:
def set_the_skin(skin):
    pass
    #à remplir une fois que Noémie a codé les différents skins
    
def dessin_fruit() :
    couleur_fruit = ROUGE 
    forme_fruit = pygame.Rect((fruit[0]*l_case, fruit[1]*h_case),(l_case,h_case)) #Coordonnnées du sommet en haut à gauche, largeur, hauteur
    pygame.draw.rect(fen, couleur_fruit, forme_fruit) #Création du fruit

def dessin_snake() :
    couleur_snake = VERT
    for cellule in snake : #pour chaque cellule du serpent
        forme_cellule = pygame.Rect((cellule[0]*l_case, cellule[1]*h_case),(l_case,h_case)) #on crée la forme de la cellule
        pygame.draw.rect(fen, couleur_snake, forme_cellule) #on dessine une cellule du serpent

def maj_snake(direction) :
    global fruit
    global score
    dirX, dirY = direction
    #Pour le déplacement, on va supprimer la queue et créer une cellule devant la tête
    tête = snake[0].copy()
    tête[0] = (tête[0] + dirX) % nb_cases_x #le modulo permet de faire apparaître la tête à gauche quand on touche  la bordure droite par ex
    tête[1] = (tête[1] + dirY) % nb_cases_y
    if tête in snake[1 : ] :
        return False
    elif tête == fruit :
        score += 1 # le serpent mange    un fruit
        fruit = None
        while fruit == None :
            nouveau_fruit = [randint(0,nb_cases_x-1), randint(0,nb_cases_y-1)]
            fruit = nouveau_fruit if nouveau_fruit not in snake else None
    else :
        snake.pop()
    snake.insert(0, tête)
    return True

#Liste des fonctions pour le menu
def set_difficulty(selected: Tuple, value: Any) -> None:
    global tp
    if selected[0] == ('Easy', 1):
        tp = 12
    else:
        tp = 20

def draw_text(text, font, text_col, x, y):
  img = font.render(text, True, text_col)
  screen.blit(img, (x, y))

def start_the_game():
    global fen, snake_x,snake_y, snake,fruit
    pygame.font.init() # initialisation de l'affichage pour le score 
    
    #Mode de jeu
    en_cours = True #Le jeu est en cours
    pygame.font.init()
    myfont = pygame.font.Font(None, 36)
    direction = [1,0] #Première valeur : 0=bouge pas ; 1=va à droite ; -1=va à gauche
                    #Seconde valeur :  0=bouge pas ; 1=va en bas ; -1=va en haut
    while en_cours == True :#tant que le jeu est en cours,
        
        pygame.time.Clock().tick(tp) #ne fait la boucle que toutes les laps de temps donnés
        for event in pygame.event.get() : #on regarde tous les événements de la liste pygame.event                      
            if event.type == pygame.QUIT : #pygame.QUIT = fonction pour sortir du jeu
                en_cours = False
            if event.type == pygame.KEYDOWN :
                if event.key == pygame.K_ESCAPE : #la touche 'espace' permet de fermer le jeu
                    en_cours = False
                    pygame.quit()
                if event.key == pygame.K_RIGHT and not direction == [-1,0] : #on va à droite si on n'est pas à gauche
                    direction = [1,0]
                if event.key == pygame.K_LEFT and not direction == [1,0] : #on va à gauche si on n'est pas à droite
                    direction = [-1,0]
                if event.key == pygame.K_UP and not direction == [0,1] : #on va en haut si on n'est pas en bas
                    direction = [0,-1]
                if event.key == pygame.K_DOWN and not direction == [0,-1] : #on va en bas si on n'est pas en haut
                    direction = [0,1]
            
        
        #Update
        if maj_snake(direction) == False : 
            print("Perdu !")
            en_cours = False
        #Draw            
        fen.fill(bg_color) #Ajout de la couleur sur la fenêtre
        dessin_snake()
        dessin_fruit()
        myfont = pygame.font.SysFont("monospace", 16)
        score_display = myfont.render('Score: ' + str(score), True, BLANC)
        fen.blit(score_display, (500, 50))
        pygame.display.update()
        
         # Pour mémoriser le fichier:                                                   
        # Ouvrir le fichier en mode écriture
        with open("scores_snake.txt", "r") as f:
            previous_score = f.readlines()[-1][:-1]
        with open('scores_snake.txt' , 'a') as f:
            if previous_score == '_' or score > int(previous_score):
                f.write(str(score) + '\n')

l = 640 #largeur de la fenêtre
h = 640 #hauteur de la fenêtre
fen = pygame.display.set_mode((l,h)) #création de la fenêtre
bg_color = pygame.Color(20,40,80) #Couleur du fond
tp = 12 #variable de difficulté par défaut 


#Création de la grille
nb_cases_x = 64
nb_cases_y = 64
l_case = l // nb_cases_x #largeur de chaque case
h_case = h // nb_cases_y #hauteur de chaque case

#Création du serpent
snake_x, snake_y = nb_cases_x // 4, nb_cases_y // 2 #Position de départ du serpent
snake = [[snake_x, snake_y],[snake_x-1, snake_y],[snake_x-2, snake_y]] #Le serpent

#Création de la nourriture
fruit = [nb_cases_x//2, nb_cases_y//2]
score = 0
pygame.font.init() # initialisation de l'affichage pour le score 


# Code:
menu = pygame_menu.Menu(
    height=640,
    theme=pygame_menu.themes.THEME_BLUE,
    title='Snake',
    width=640
    )
skin_menu = pygame_menu.Menu(
    columns=2,
    height=640,
    onclose=pygame_menu.events.EXIT,
    rows=3,
    theme=pygame_menu.themes.THEME_GREEN,
    title='Skins',
    width=640
    )
    
#Recherche du meilleur score (s'il existe) pour l'afficher
path= os.getcwd() + '\scores_snake.txt'
if not os.path.isfile(path) :
    with open("scores_snake.txt",'w') as f:
        f.write('_\n')
        
with open("scores_snake.txt", "r") as f:
    meilleur_score = f.readlines()[-1][:-1]    #lz [:-1] sert à couper le saut de ligne 
    
    
menu.add.label('Best score: '+ meilleur_score)
menu.add.label('Diamants: ')
menu.add.button('Skins',skin_menu)
menu.add.selector('Difficulty: ', [('Easy', 1), ('Hard', 2)], onchange=set_difficulty)
menu.add.button('Play', start_the_game)
menu.add.button('Quit', pygame_menu.events.EXIT)
skin_menu.add.button('Serpent', set_the_skin('serpent'),100)
skin_menu.add.button('Poule', set_the_skin('poule'),200)
skin_menu.add.button('Ours', set_the_skin('ours'),300)
skin_menu.add.button('Hérisson', set_the_skin('herisson'),400)
skin_menu.add.button('Girafe', set_the_skin('girafe'),500)
skin_menu.add.button('?', set_the_skin('?'),600)

police = pygame.font.SysFont('freesans', 50)

if __name__ == '__main__':
    menu.mainloop(surface) 
